On a Pi Zero 2 W, “USB serial gadget” should work as expected but if not these issues are the main culprits:

1. editing the wrong files/paths (Bookworm moved them),
2. not running a login (getty) on the gadget TTY, and
3. loading the wrong gadget module (e.g., g\_ether instead of g\_serial).

Below is a clean, deterministic recipe that keeps HDMI + keyboard working while also bringing up the USB serial console on Windows (COMx). After that, I’ve included a quick decision-tree to debug the current card and a short “what to upload” checklist.

---

# Flash a new sd card with a fresh Linux OS & minimal config:

1. **flash new 16GB SanDisk SD Card**:

* on Windows laptop, using Raspberry Pi Imager v1.9.6
* Raspberry Pi Device: RASBERRY PI ZERO 2 W (not sure why there are two - picked the first one) 
* Operating System: RASBERRY PI OS LITE (32-BIT) from "Raspberry Pi OS D(Other)" menu - i.e. Rasberry Pi OS Lite (32-bit) A port of Debian Bookworm with no edesktop environment; Released: 2025-05-13; cached
* Storage: GENERIC STORAGE DEVICE USB Device - 15.9 GB (mounted as D:\ - Exclude System Drives checked)
* Edit OS customization settings:
** set hostname: rpi0-lab2.local
** default lab username & password (pi; *******)
** configure wireless LAN (UCSD-PROTECTED); no hidden SSID
** Wireless LAN country: US
** Set locale settings - Time zone: America/Los_Angeles; keyboard layout: us
** All else default
** Then "yes" to apply OS customization settings
** continue (yes - existing data erased)
---

# Known-good setup (fresh or existing card)

**Where to edit:** On current Raspberry Pi OS, the boot partition you see on Windows is the right place, and the key file is `/boot/firmware/config.txt` (not legacy `/boot/config.txt`). Your own notes already flagged this location change, and the official docs confirm it. &#x20;

1. **Edit `/boot/firmware/config.txt`** (append this anywhere):

```
dtoverlay=dwc2
```

This enables the OTG USB controller for gadget use. (The Ethernet-gadget how-to you attached uses the same overlay—only the gadget module differs.)&#x20;

2. **Edit `/boot/firmware/cmdline.txt`** (single line; do not add line breaks).
   Append the bolded bits (keep everything else as-is):

```
... rootwait **modules-load=dwc2,g_serial** console=tty1
```

* `g_serial` is the *serial* gadget (CDC-ACM).
* `console=tty1` keeps your HDMI/keyboard login active so you’re never locked out while testing. (You do **not** need to disable tty1; you can have both HDMI and USB-serial logins simultaneously.)

3. **Boot with HDMI+keyboard**, and connect your **Windows laptop to the Pi’s “USB” data port** (not the “PWR IN” port) using a **data-capable** micro-USB cable.

4. **Enable a getty on the gadget port** (this is the step most people miss). On the Pi:

```bash
sudo systemctl enable --now serial-getty@ttyGS0.service
```

That spawns a login prompt on `/dev/ttyGS0` (the gadget TTY).

5. **Verify on the Pi:**

```bash
ls -l /dev/ttyGS0
lsmod | grep -E 'dwc2|g_serial'
dmesg | grep -iE 'g_serial|cdc_acm|gadget'
```

You should see `/dev/ttyGS0`, both modules loaded, and gadget messages in dmesg.

6. **Verify on Windows:** In Device Manager you should see **“USB Serial Device (COMx)”**. Open it in PuTTY/TeraTerm at **COMx** (speed 115200 is fine; USB ignores it). Press **Enter** once or twice— you should get `raspberrypi login:`.

> Notes:
>
> * If you had previously used Ethernet gadget (`g_ether`), make sure only one gadget is loaded (use `modules-load=dwc2,g_serial` exactly).
> * You do **not** need `enable_uart=1` for USB gadget serial; that’s only for the GPIO UART.
> * Keeping `console=tty1` means you’ll always retain a local HDMI login while debugging.

This matches the overlay/module pattern you’ve already used for USB-Ethernet gadget (just swap `g_ether` → `g_serial`), and it matches the Bookworm file locations you documented in your rpi0-power repo. &#x20;

---

# Fast debug on your current SD card

If Windows shows **COM5** but PuTTY is blank, the usual culprit is the missing getty on `ttyGS0`:

* **COM present, blank terminal:** On the Pi, run:

  ```bash
  systemctl status serial-getty@ttyGS0.service
  sudo systemctl enable --now serial-getty@ttyGS0.service
  ```

  Try again in PuTTY and press Enter.

* **No COM device on Windows:**
  • Double-check you’re in the **USB data port** (not “PWR IN”).
  • Use a **known data cable** (charge-only cables won’t enumerate).
  • On the Pi:

  ```bash
  lsmod | grep -E 'dwc2|g_serial'   # both must be present
  dmesg | grep -i gadget            # should show enumeration
  ```

  • Re-open `/boot/firmware/config.txt` and `/boot/firmware/cmdline.txt` on the card and confirm:

  * `dtoverlay=dwc2` is in **config.txt** (correct path!), and
  * `modules-load=dwc2,g_serial` is in **cmdline.txt** (single line).
    The path and overlay behaviors are detailed in the official config.txt docs and your repo note about the moved file location. &#x20;

* **Still nothing?** Make sure you didn’t accidentally leave `g_ether` in `cmdline.txt` from earlier tests—only one gadget at a time. If in doubt, reduce to the minimal config above (dwc2 + g\_serial) and retest.

---

# Optional: one-time script to (re)enable everything

Run these once on the Pi (with HDMI+keyboard) to enforce the setup:

```bash
sudo bash -c 'grep -q "^dtoverlay=dwc2$" /boot/firmware/config.txt || echo dtoverlay=dwc2 >> /boot/firmware/config.txt'
sudo sed -i "s/rootwait/& modules-load=dwc2,g_serial console=tty1/" /boot/firmware/cmdline.txt
sudo systemctl enable --now serial-getty@ttyGS0.service
sudo reboot
```

---

# When a fresh image helps

If you suspect earlier power-tuning collided with gadget settings, a **fresh Raspberry Pi OS Lite (32-bit)** image plus the exact 3 edits above is the quickest sanity check. Keep Wi-Fi/BT disabled if you wish; those don’t interfere with gadget mode. Your repo’s discovery about the **/boot/firmware/** location remains crucial on current images.&#x20;

---

# If you want USB-Ethernet instead (reference)

For comparison, the Ethernet gadget uses the same overlay but different module:

* `config.txt`: `dtoverlay=dwc2`
* `cmdline.txt`: `... rootwait modules-load=dwc2,g_ether ...`
  That’s exactly the pattern shown in your attached Zero 2 W write-up; for **serial**, just use `g_serial`.&#x20;

---

# What to upload next (most useful artifacts)

If you want me to pinpoint the failure quickly, please share:

* `/boot/firmware/config.txt` and `/boot/firmware/cmdline.txt` (as files or pasted text).
* Output of:

  ```
  ls -l /dev/ttyGS0
  lsmod | grep -E 'dwc2|g_(serial|ether|acm|rndis)'
  systemctl status serial-getty@ttyGS0.service
  dmesg | tail -n 200
  cat /proc/cmdline
  ```
* A photo of which micro-USB port/cable you’re using.

Those, combined with the moved-config location you documented and the config.txt behavior in the official docs, will let us zero in on anything subtle left over from the earlier power-optimizations. &#x20;

---

**Why this will work:** the Zero 2 W procedure for gadget mode is: enable **dwc2** overlay, load the correct gadget module in **cmdline.txt**, and run a **serial-getty** on `ttyGS0`. Your Ethernet-gadget notes already have the overlay/module pattern; this response adapts it for **serial**, keeps HDMI/keyboard intact, and uses the correct **/boot/firmware/** paths introduced in newer Raspberry Pi OS.  &#x20;
